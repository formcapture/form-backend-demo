services:

  masterportal:
    container_name: ${COMPOSE_PROJECT_NAME}-masterportal
    build:
      context:  ${PWD}/masterportal
      args:
        MP_TAG: ${MP_TAG}
    volumes:
      - ${PWD}/masterportal/config/:/usr/share/nginx/html/portal/demo/
    networks:
      - app-network

  keycloak:
    container_name: ${COMPOSE_PROJECT_NAME}-keycloak
    image: quay.io/keycloak/keycloak:26.2.5
    environment:
      KC_BOOTSTRAP_ADMIN_USERNAME: ${KEYCLOAK_USER}
      KC_BOOTSTRAP_ADMIN_PASSWORD: ${KEYCLOAK_PASSWORD}
      KC_DB: postgres
      KC_DB_URL_HOST: keycloak-db
      KC_DB_URL_PORT: 5432
      KC_DB_URL_DATABASE: keycloak
      KC_DB_USERNAME: ${POSTGRES_USER}
      KC_DB_PASSWORD: ${POSTGRES_PASSWORD}
      KC_METRICS_ENABLED: "true"
      KC_HEALTH_ENABLED: "true"
      KC_HTTP_ENABLED: "true"
      KC_HOSTNAME: ${HOSTNAME}
      PROXY_ADDRESS_FORWARDING: "true"
    depends_on:
       - keycloak-db
    # use this block for exporting the keycloak configuration
    # entrypoint: ["/bin/sh", "-c"]
    # command: ["sleep infinity"]
    # use this for production setup (needs https)
    command: start --proxy-headers xforwarded --http-relative-path=/auth --metrics-enabled=true --import-realm --health-enabled=true
    networks:
      - app-network
    healthcheck:
      test: ['CMD-SHELL', '[ -f /tmp/HealthCheck.java ] || echo "public class HealthCheck { public static void main(String[] args) throws java.lang.Throwable { java.net.URI uri = java.net.URI.create(args[0]); System.exit(java.net.HttpURLConnection.HTTP_OK == ((java.net.HttpURLConnection)uri.toURL().openConnection()).getResponseCode() ? 0 : 1); } }" > /tmp/HealthCheck.java && java /tmp/HealthCheck.java http://localhost:9000/auth/health/live']
      interval: 5s
      retries: 5
      start_period: 5s
      timeout: 10s

  keycloak-db:
    container_name: ${COMPOSE_PROJECT_NAME}-keycloak-db
    image: postgres:17-alpine
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - ${PWD}/postgres-keycloak/init_data:/docker-entrypoint-initdb.d
      - ${PWD}/postgres-keycloak/data:/var/lib/postgresql/data
    networks:
      - app-network

  db:
    container_name: ${COMPOSE_PROJECT_NAME}-db
    image: postgis/postgis:17-3.5-alpine
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - ${PWD}/postgres/init_data:/docker-entrypoint-initdb.d
      - ${PWD}/postgres/data:/var/lib/postgresql/data
    networks:
      - app-network

  postgrest:
    image: postgrest/postgrest:v12.2.12
    environment:
      PGRST_DB_URI: ${PGRST_DB_URI}
      # TODO check which value should be used here
      PGRST_OPENAPI_SERVER_PROXY_URI: http://127.0.0.1:3000
      PGRST_DB_SCHEMAS: ${PGRST_DB_SCHEMAS}
      PGRST_DB_ANON_ROLE: ${PGRST_DB_ANON_ROLE}
      PGRST_JWT_SECRET: ${PGRST_JWT_SECRET}
      PGRST_JWT_ROLE_CLAIM_KEY: ${PGRST_JWT_ROLE_CLAIM_KEY}
    depends_on:
      - db
    networks:
      - app-network

  form-backend:
    container_name: ${COMPOSE_PROJECT_NAME}-form-backend
    image: ghcr.io/formcapture/form-backend:1.1.0
    restart: unless-stopped
    environment:
      FILE_UPLOAD_DIR: ${FB_FILE_UPLOAD_DIR}
      FORM_CONFIGS_DIR: "form_configs"
      KC_AUTH_SERVER_URL: https://${HOSTNAME}/auth
      KC_CLIENT_APP_ID: ${CLIENT_APP_ID}
      KC_PUBLIC_KEY: ${KEYCLOAK_PUBLIC_KEY}
      KC_REALM: ${KEYCLOAK_REALM}
      LOG_LEVEL: 'debug'
      POSTGREST_DEFAULT_SCHEMA: ${PGRST_DEFAULT_SCHEMA}
      POSTGREST_JWT_CLIENT_ID: ${PGRST_KEYCLOAK_CLIENT_ID}
      POSTGREST_KEYCLOAK_CLIENT_SECRET: ${PGRST_KEYCLOAK_CLIENT_SECRET}
      POSTGREST_SCHEMA: ${PGRST_DB_SCHEMAS}
      POSTGREST_URL: "http://postgrest:3000"
      SIZE_LIMIT: ${FB_SIZE_LIMIT}
    volumes:
      - ${PWD}/form-backend/form_configs:/form-backend/form_configs
      - ${PWD}/form-backend/uploads:/form-backend/uploads
    depends_on:
      - postgrest
    networks:
      - app-network

networks:
  app-network:
